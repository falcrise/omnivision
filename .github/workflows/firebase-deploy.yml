name: Deploy to Firebase Hosting

on:
  push:
    branches: [ main, master ]
    paths:
      - 'public/**'
      - 'firebase.json'
      - '.firebaserc'
      - '.github/workflows/firebase-deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'public/**'
      - 'firebase.json'
      - '.firebaserc'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          
      - name: Validate Firebase Configuration
        run: |
          # Check if required files exist
          if [ ! -f "firebase.json" ]; then
            echo "❌ firebase.json not found"
            exit 1
          fi
          
          if [ ! -f ".firebaserc" ]; then
            echo "❌ .firebaserc not found"
            exit 1
          fi
          
          if [ ! -d "public" ]; then
            echo "❌ public directory not found"
            exit 1
          fi
          
          echo "✅ Firebase configuration files validated"
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Verify Firebase Project Configuration
        run: |
          echo "Firebase projects configured:"
          firebase projects:list --token ${{ secrets.FIREBASE_TOKEN }}
          
          echo "Current project:"
          firebase use --token ${{ secrets.FIREBASE_TOKEN }}
          
      - name: Build Application (if needed)
        run: |
          # Add any build steps here if you have a build process
          # For now, we'll just validate the public directory structure
          echo "📂 Public directory contents:"
          ls -la public/
          
          # Validate required files
          required_files=("public/index.html" "public/app.js" "public/config.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ All required files present"
          
      - name: Update Config for Environment
        run: |
          # Update config.js based on environment
          environment="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
          
          echo "🔧 Updating config for environment: $environment"
          
          # You can add environment-specific config updates here
          # For example, different API endpoints for staging vs production
          
          if [ "$environment" = "production" ]; then
            echo "📋 Using production configuration"
            # Add production-specific config updates here
          else
            echo "📋 Using staging configuration"
            # Add staging-specific config updates here
          fi
          
      - name: Deploy to Firebase Hosting
        run: |
          environment="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
          
          if [ "$environment" = "production" ]; then
            echo "🚀 Deploying to production..."
            firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }} --project production
          else
            echo "🚀 Deploying to staging..."
            firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }} --project staging
          fi
          
      - name: Post-deployment Verification
        run: |
          environment="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
          
          echo "✅ Deployment completed!"
          echo "🌐 Environment: $environment"
          echo "📊 Deployment summary:"
          
          # Get the hosting URL from Firebase
          if [ "$environment" = "production" ]; then
            echo "🔗 Production URL: Check Firebase Console for the live URL"
          else
            echo "🔗 Staging URL: Check Firebase Console for the staging URL"
          fi
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'staging' }}';
            const body = `## 🚀 Firebase Deployment
            
            ✅ Successfully deployed to **${environment}**
            
            ### Deployment Details
            - **Environment**: ${environment}
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Branch**: ${context.ref.replace('refs/heads/', '')}
            - **Workflow**: [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### What's Deployed
            - Real-time video analysis interface
            - Vertex AI integration
            - Updated configuration
            
            🔗 **Preview URL**: Check Firebase Console for the deployed URL
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Security Scan for Secrets
        run: |
          echo "🔍 Scanning for potential secrets in public files..."
          
          # Check for common secret patterns in public directory
          if grep -r -E "(api[_-]?key|secret|token|password)" public/ --include="*.js" --include="*.html" --include="*.css"; then
            echo "❌ Potential secrets found in public files!"
            echo "⚠️  Make sure no API keys or secrets are committed to public files"
            exit 1
          else
            echo "✅ No secrets detected in public files"
          fi
          
      - name: Validate Environment Configuration
        run: |
          echo "🔧 Validating environment configuration..."
          
          # Check if config.js has placeholder values
          if grep -E "(your-project-id|your-endpoint-id|enter-your)" public/config.js; then
            echo "⚠️  Config file contains placeholder values"
            echo "🔧 Make sure to update config.js with actual values before deployment"
          else
            echo "✅ Config file validation passed"
          fi
